# -*- coding: utf-8 -*-
"""Agente_Criador_de_Projeto_teste_01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RZaWHuF6qpc8d9Q-KVeaqC6DWFAkgQpH
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando √© a pr√≥xima imers√£o de IA ###############################################
response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
)


# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Pergunta ao Gemini uma informa√ß√£o utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
    # Inserir a tool de busca do Google ###############################################
    config={"tools": [{"google_search":{}}] }
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

for model in client.models.list():
    print(model.name)

##########################################
# --- Agente 1: Desenvolvedor --- #
##########################################
def agente_dev(topico):
    buscador = Agent(
        name = "agente_dev",
        model = "gemini-2.5-flash-preview-04-17",
        description = "Agente que vai criar a primeira vers√£o do c√≥digo",
        tools = [google_search],
        instruction = """
        Voc√™ √© um assistente desenvolvedor. A sua tarefa √© criar um projeto usando Python, conectando com minha Google API key, usando o Framework ADK,
        na plataforma Google Colab, para criar um agente de AI generativa.
        Declare minha API KEY como os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
        O projeto consiste em criar um m√©todo de estudo de japon√™s para iniciantes, baseado em flashcards.
        Cada ciclo de estudo deve conter 10 flashcards, contendo todos hiraganas e katakanas e palavras b√°sicas com n√≠vel de japon√™s b√°sico.
        A ordem dos flashcards deve ser aleat√≥ria.
        Ao final de cada ciclo, um resumo do estudo deve aparecer, como a porcentagem de erro e acerto, mensagem motivacional curta em Portugu√™s e Japones.
        O usuario deve responder ao flashcard por multipla escolha.
        Escreva o c√≥digo de maneira que poder√° ser rodado direto no Colab.
        Quero que utilize a fun√ß√£o markdown para deixar os flashcards mais apresent√°veis.

        """
    )

    entrada_do_agente_desenvolvedor = f"T√≥pico: {topico}"
    # Executa o agente
    codigo_desenvolvido = call_agent(buscador, entrada_do_agente_desenvolvedor)
    return codigo_desenvolvido

################################################
# --- Agente 2: Aprimorador --- #
################################################
def agente_aprimorador(codigo_desenvolvido):
    aprimorador = Agent(
        name="agente_aprimorador",
        model="gemini-2.5-flash-preview-04-17",
        # Inserir as instru√ß√µes do Agente Aprimorador #################################################
        instruction="""
        Aprimore o c√≥digo de Colab, expandindo o vocabul√°rio.
        Adicione iconogr√°fias, como emojis para ilustrar acertos e erros, e emojis japoneses na mensagem motivacional.
        Crie n√≠veis de dificuldade, separe o estudo em t√≥picos para o usu√°rio escolher o que vai estudar.
        Por exemplo, animais, verbos, cores, etc.
        Tenha pelo menos 5 flashcards de cada tipo
        """,
        description="Agente que aprimora o c√≥digo inicial",
        tools=[google_search]
    )

    entrada_do_agente_aprimorador = f"Codigo desenvolvido: {codigo_desenvolvido}"
    # Executa o agente
    codigo_novo = call_agent(aprimorador, entrada_do_agente_aprimorador)
    return codigo_novo

######################################
# --- Agente 3: Reescrever --- #
######################################
def agente_tester(codigo_novo):
    redator = Agent(
        name="agente_tester",
        model="gemini-2.5-flash-preview-04-17",
        instruction="""
        Reescreva o codigo novo, deixe ele da forma mais simples e sucinta poss√≠vel, sem perder nenhuma fun√ß√£o, nenhum vocabul√°rio ou alfabeto.
        Verfique se as bibliotecas utilizadas est√£o ativas e foram declaradas no c√≥digo.
        Procure por bugs e erros e elimine-os.
        Lembre-se que o c√≥digo dever√° estar completo para apenas rodar no Colab.
            """,
        description="Agente que reescreve o c√≥digo aprimorado",
        tools=[google_search]
    )
    entrada_do_agente_tester = f"C√≥digo Novo: {codigo_novo}"
    # Executa o agente
    codigo_v3 = call_agent(redator, entrada_do_agente_tester)
    return codigo_v3

##########################################
# --- Agente 4: Novas_Ideias --- #
##########################################
def agente_idealizador(codigo_v3):
    revisor = Agent(
        name="agente_idealizador",
        model="gemini-2.5-flash-preview-04-17",
        instruction="""
        Se algo do c√≥digo n√£o estiver correto, apresente o c√≥digo revisado.
        Caso contrario afirme que o c√≥digo v3 est√° perfeito para ser executado.
            """,
        description="Agente que tras novas ideias para o c√≥digo.",
        tools=[google_search]
    )
    entrada_do_agente_idealizador = f"C√≥digo v3: {codigo_v3}"
    # Executa o agente
    codigo_revisado = call_agent(revisor, entrada_do_agente_idealizador)
    return codigo_revisado

#data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Sistema de Cria√ß√£o de C√≥digo para Estudar Japon√™s üöÄ")

# -----
topico = input("‚ùì Por favor, digite iniciar para come√ßar a estudar: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not topico:
    print("Voc√™ esqueceu de digitar")
else:
    print("Vamos come√ßar a estudar!")

    codigo_desenvolvido = agente_dev(topico)
    print("\n--- üìù Resultado do Agente 1 (Desenvolvedor) ---\n")
    #print(codigo_desenvolvido)
    display(to_markdown(codigo_desenvolvido))
    print("--------------------------------------------------------------")

    codigo_novo = agente_aprimorador(codigo_desenvolvido)
    print("\n--- üìù Resultado do Agente 2 (Aprimorador) ---\n")
    #print(codigo_novo)
    display(to_markdown(codigo_novo))
    print("--------------------------------------------------------------")

    codigo_v3 = agente_tester(codigo_novo)
    print("\n--- üìù Resultado do Agente 3 (Redator) ---\n")
    #print(codigo_v3)
    display(to_markdown(codigo_v3))
    print("--------------------------------------------------------------")

    post_final = agente_idealizador(codigo_v3)
    print("\n--- üìù Resultado do Agente 4 (Revisor) ---\n")
    #print(post_final)
    display(to_markdown(post_final))
    print("--------------------------------------------------------------")